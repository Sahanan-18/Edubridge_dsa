1: Two Sum
#include <stdio.h>
void twoSum(int arr[], int n, int target) {
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (arr[i] + arr[j] == target) {
                printf("Indices: %d and %d\n", i, j);
                return;
            }
        }
    }
    printf("No pair found\n");
}
int main() {
    int arr[] = {2, 7, 11, 15};
    int target = 9;
    int n = sizeof(arr) / sizeof(arr[0]);
    twoSum(arr, n, target);
    return 0;
}


2: Binary Search
#include <stdio.h>
int binarySearch(int arr[], int n, int target) {
    int low = 0, high = n - 1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (arr[mid] == target)
            return mid;
        else if (arr[mid] < target)
            low = mid + 1;
        else
            high = mid - 1;
    }
    return -1;
}

int main() {
    int arr[] = {1, 3, 5, 7, 9, 11};
    int target = 7;
    int n = sizeof(arr) / sizeof(arr[0]);
    int result = binarySearch(arr, n, target);
    if (result != -1)
        printf("Element found at index: %d\n", result);
    else
        printf("Element not found\n");
    return 0;
}


3: Anagram Check
#include <stdio.h>
#include <string.h>
#include <stdbool.h>
bool areAnagrams(char *s1, char *s2) {
    if (strlen(s1) != strlen(s2)) return false;

    int count1[256] = {0}, count2[256] = {0};

    for (int i = 0; s1[i]; i++) {
        count1[(unsigned char)s1[i]]++;
        count2[(unsigned char)s2[i]]++;
    }
    for (int i = 0; i < 256; i++)
        if (count1[i] != count2[i])
            return false;

    return true;
}

int main() {
    char str1[] = "listen";
    char str2[] = "silent";

    if (areAnagrams(str1, str2))
        printf("The strings are anagrams.\n");
    else
        printf("The strings are not anagrams.\n");

    return 0;
}


4: Longest Substring Without Repeating Characters
#include <stdio.h>
#include <string.h>

int longestUniqueSubstring(char *s) {
    int lastIndex[256];
    for (int i = 0; i < 256; i++) lastIndex[i] = -1;

    int maxLen = 0, start = 0;

    for (int i = 0; s[i]; i++) {
        if (lastIndex[(unsigned char)s[i]] >= start)
            start = lastIndex[(unsigned char)s[i]] + 1;
        lastIndex[(unsigned char)s[i]] = i;
        if (i - start + 1 > maxLen)
            maxLen = i - start + 1;
    }

    return maxLen;
}

int main() {
    char str[] = "abcabcbb";
    int result = longestUniqueSubstring(str);
    printf("Length of longest substring without repeating characters: %d\n", result);
    return 0;
}


5: Count Palindromic Substrings
#include <stdio.h>
#include <string.h>

int expandAroundCenter(char *s, int left, int right) {
    int count = 0;
    while (left >= 0 && right < strlen(s) && s[left] == s[right]) {
        count++;
        left--;
        right++;
    }
    return count;
}

int countPalindromicSubstrings(char *s) {
    int count = 0;
    int n = strlen(s);
    for (int i = 0; i < n; i++) {
        count += expandAroundCenter(s, i, i);     // Odd-length
        count += expandAroundCenter(s, i, i + 1); // Even-length
    }
    return count;
}

int main() {
    char str[] = "aaa";
    int result = countPalindromicSubstrings(str);
    printf("Total palindromic substrings: %d\n", result);
    return 0;
}
